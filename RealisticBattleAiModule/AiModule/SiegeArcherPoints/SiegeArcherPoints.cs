// ScatterAroundExpanded.ScatterAroundExpanded
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Xml;
using TaleWorlds.Core;
using TaleWorlds.Engine;
using TaleWorlds.Library;
using TaleWorlds.MountAndBlade;
using TaleWorlds.MountAndBlade.View.MissionViews;

public class SiegeArcherPoints : MissionView
{
	public bool firstTime = true;
	public bool xmlExists = false;
	public static bool isEditingXml = true;
	public bool editingWarningDisplayed = false;
	public bool isFirstTimeLoading = true;

	public override void OnMissionScreenTick(float dt)
    {
        if (isFirstTimeLoading && Mission.Current != null && Mission.Current.IsSiegeBattle)
        {
			XmlDocument xmlDocument = new XmlDocument();
			if (File.Exists(RealisticBattleAiModule.Utilities.GetSiegeArcherPointsPath()))
			{
				xmlDocument.Load(RealisticBattleAiModule.Utilities.GetSiegeArcherPointsPath());
				xmlExists = true;
			}

			if (xmlExists)
			{
				foreach (XmlNode sceneXmlNode in xmlDocument.SelectSingleNode("/scenes").ChildNodes)
				{
					if (sceneXmlNode.LocalName.Equals(Mission.Current.Scene.GetName() + "_" + Mission.Current.Scene.GetUpgradeLevelMask()))
					{
						List<GameEntity> gameEntities = new List<GameEntity>();
						Mission.Current.Scene.GetEntities(ref gameEntities);
						foreach (GameEntity g2 in gameEntities)
						{
							if (g2.HasScriptOfType<StrategicArea>() && (!g2.HasTag("PlayerStratPoint") & !g2.HasTag("BeerMarkerPlayer")) && g2.GetOldPrefabName() == "strategic_archer_point")
							{
								Mission.Current.Teams.Defender.TeamAI.RemoveStrategicArea(g2.GetFirstScriptOfType<StrategicArea>());
								g2.RemoveAllChildren();
								g2.Remove(1);
							}
						}
						List<GameEntity> ListBase = Mission.Current.Scene.FindEntitiesWithTag("BeerMarkerBase").ToList();
						foreach (GameEntity b in ListBase)
						{
							b.RemoveAllChildren();
							b.Remove(1);
						}
						List<GameEntity> ListG = Mission.Current.Scene.FindEntitiesWithTag("PlayerStratPoint").ToList();
						List<GameEntity> ListArrow = Mission.Current.Scene.FindEntitiesWithTag("BeerMarkerPlayer").ToList();
						foreach (GameEntity g in ListG)
						{
							Mission.Current.Teams.Defender.TeamAI.RemoveStrategicArea(g.GetFirstScriptOfType<StrategicArea>());
							g.RemoveAllChildren();
							g.Remove(1);
						}
						foreach (GameEntity h in ListArrow)
						{
							h.RemoveAllChildren();
							h.Remove(1);
						}

						foreach (XmlNode pointNode in sceneXmlNode.ChildNodes)
						{
							double[] parsed = Array.ConvertAll(pointNode.InnerText.Split(new[] { ',', }, StringSplitOptions.RemoveEmptyEntries), Double.Parse);

							WorldFrame worldPos = new WorldFrame(new Mat3((float)parsed[0], (float)parsed[1], (float)parsed[2], (float)parsed[3],
								(float)parsed[4], (float)parsed[5], (float)parsed[6], (float)parsed[7], (float)parsed[8]), new WorldPosition(Mission.Current.Scene, new Vec3((float)parsed[9], (float)parsed[10], (float)parsed[11])));

							GameEntity gameEntity = GameEntity.Instantiate(Mission.Current.Scene, "strategic_archer_point", worldPos.ToNavMeshMatrixFrame());
							gameEntity.SetMobility(GameEntity.Mobility.dynamic);
							gameEntity.AddTag("PlayerStratPoint");
							gameEntity.SetVisibilityExcludeParents(visible: true);
							StrategicArea firstScriptOfType = gameEntity.GetFirstScriptOfType<StrategicArea>();
							firstScriptOfType.InitializeAutogenerated(1f, 1, Mission.Current.Teams.Defender.Side);

							GameEntity BeerMark = GameEntity.Instantiate(Mission.Current.Scene, "arrow_new_icon", worldPos.ToNavMeshMatrixFrame());
							BeerMark.AddTag("BeerMarkerPlayer");
							BeerMark.SetVisibilityExcludeParents(visible: false);
							BeerMark.GetGlobalScale().Normalize();
							BeerMark.SetMobility(GameEntity.Mobility.dynamic);
							Mission.Current.Teams.Defender.TeamAI.AddStrategicArea(firstScriptOfType);
						}
					}
				}
			}

			isFirstTimeLoading = false;
			return;
		}
		//     if (!editingWarningDisplayed && isEditingXml)
		//     {
		//InformationManager.DisplayMessage(new InformationMessage("YOU ARE IN EDIT MODE, YOU WILL REMOVE ALL ARCHER POINTS FROM THIS SCENE AFTER STARTING BATTLE", Color.FromUint(16711680u)));
		//editingWarningDisplayed = true;
		//     }
		if (firstTime && Mission.Current != null && Mission.Current.IsSiegeBattle && Mission.Current.PlayerTeam.IsDefender && Mission.Current.Mode != MissionMode.Deployment)
		{
			((MissionBehavior)this).AfterStart();
			List<GameEntity> gameEntities = new List<GameEntity>();
			Mission.Current.Scene.GetEntities(ref gameEntities);

			XmlDocument xmlDocument = new XmlDocument();
			if (File.Exists(RealisticBattleAiModule.Utilities.GetSiegeArcherPointsPath()))
			{
				xmlDocument.Load(RealisticBattleAiModule.Utilities.GetSiegeArcherPointsPath());
				xmlExists = true;
            }
            else
            {
				XmlDeclaration xmlDeclaration = xmlDocument.CreateXmlDeclaration("1.0", "UTF-8", null);

				XmlElement root = xmlDocument.DocumentElement;
				xmlDocument.InsertBefore(xmlDeclaration, root);
				xmlDocument.AppendChild(xmlDocument.CreateElement(string.Empty, "scenes", string.Empty));
			}

			XmlNode sceneNode = null;
			bool shouldAppend = true;
			foreach (XmlNode sceneXmlNode in xmlDocument.SelectSingleNode("/scenes").ChildNodes)
			{
				if (sceneXmlNode.LocalName.Equals(Mission.Current.Scene.GetName() + "_" + Mission.Current.Scene.GetUpgradeLevelMask()))
				{
					sceneNode = sceneXmlNode;
					shouldAppend = false;
					break;
				}
			}
			if(sceneNode == null)
            {
				sceneNode = xmlDocument.CreateElement(string.Empty, Mission.Current.Scene.GetName() + "_" + Mission.Current.Scene.GetUpgradeLevelMask(), string.Empty);
			}

			sceneNode.RemoveAll();

			foreach (GameEntity g in gameEntities)
			{
				if (g.HasScriptOfType<StrategicArea>() && g.GetOldPrefabName() == "strategic_archer_point")
				{
					XmlElement newPointNode = xmlDocument.CreateElement(string.Empty, "point", string.Empty);
					string stringToBeSaved = "";
					stringToBeSaved += g.GetGlobalFrame().rotation.s.x + "," + g.GetGlobalFrame().rotation.s.y + "," + g.GetGlobalFrame().rotation.s.z + ",";
					stringToBeSaved += g.GetGlobalFrame().rotation.f.x + "," + g.GetGlobalFrame().rotation.f.y + "," + g.GetGlobalFrame().rotation.f.z + ",";
					stringToBeSaved += g.GetGlobalFrame().rotation.u.x + "," + g.GetGlobalFrame().rotation.u.y + "," + g.GetGlobalFrame().rotation.u.z + ",";
					stringToBeSaved += g.GetGlobalFrame().origin.x + "," + g.GetGlobalFrame().origin.y + "," + g.GetGlobalFrame().origin.z;
					newPointNode.InnerText = stringToBeSaved;

					sceneNode.AppendChild(newPointNode);
				}
			}
            if (shouldAppend)
            {
				xmlDocument.SelectSingleNode("/scenes").AppendChild(sceneNode);
			}
			xmlDocument.Save(RealisticBattleAiModule.Utilities.GetSiegeArcherPointsPath());
			firstTime = false;
		}
	}
}
